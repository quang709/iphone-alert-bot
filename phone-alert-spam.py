import asyncio                     # Th∆∞ vi·ªán chu·∫©n ƒë·ªÉ ch·∫°y t√°c v·ª• b·∫•t ƒë·ªìng b·ªô (async/await, create_task, cancel)
import os                          # ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng (.env) qua os.getenv
import logging                     # Ghi log (debug/info/error) gi√∫p theo d√µi tr·∫°ng th√°i bot
from dotenv import load_dotenv     # ƒê·ªçc file .env v√† n·∫°p bi·∫øn m√¥i tr∆∞·ªùng
from pyicloud import PyiCloudService                               # SDK kh√¥ng ch√≠nh th·ª©c ƒë·ªÉ g·ªçi iCloud
from pyicloud.exceptions import PyiCloudFailedLoginException       # Exception login iCloud l·ªói (sai mk/lock)
from telegram import Update                                        # Ki·ªÉu d·ªØ li·ªáu message update c·ªßa Telegram
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes  # Build app & ƒëƒÉng k√Ω l·ªánh

# ==== ENV & LOGGER ============================================================
load_dotenv()                      # ƒê·ªçc .env trong th∆∞ m·ª•c hi·ªán t·∫°i -> n·∫°p v√†o os.environ
logging.basicConfig(level=logging.INFO)     # C·∫•u h√¨nh log m·ª©c INFO (in ra console)
logger = logging.getLogger("tg-icloud-bot") # T·∫°o logger ri√™ng t√™n 'tg-icloud-bot'

TG_TOKEN = os.getenv("TG_TOKEN")

ICLOUD_ACCOUNTS = [
    {"email": os.getenv("ICLOUD_EMAIL_1"), "password": os.getenv("ICLOUD_PASSWORD_1")},
    {"email": os.getenv("ICLOUD_EMAIL_2"), "password": os.getenv("ICLOUD_PASSWORD_2")},
    {"email": os.getenv("ICLOUD_EMAIL_3"), "password": os.getenv("ICLOUD_PASSWORD_3")},
]

apis = {}
awaiting_2fa = {}
ring_tasks = {}  # (account_index, device_index) -> asyncio.Task

# ---------- LOGIN ----------
def icloud_login(account_index, force=False):
    if account_index in apis and not force:
        return apis[account_index], "‚úÖ D√πng session c≈©."

    try:
        email = ICLOUD_ACCOUNTS[account_index]["email"]
        password = ICLOUD_ACCOUNTS[account_index]["password"]
        api = PyiCloudService(email, password)
        apis[account_index] = api

        if api.requires_2fa:
            awaiting_2fa[account_index] = True
            return api, f"üîê T√†i kho·∫£n {account_index+1} y√™u c·∫ßu 2FA. /2fa {account_index+1} <m√£>"

        awaiting_2fa[account_index] = False
        return api, f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng t√†i kho·∫£n {account_index+1}."
    except PyiCloudFailedLoginException as e:
        apis.pop(account_index, None)
        return None, f"‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: {e}"
    except Exception as e:
        apis.pop(account_index, None)
        return None, f"‚ùå L·ªói ƒëƒÉng nh·∫≠p: {e}"

# ---------- COMMANDS ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Xin ch√†o! M√¨nh l√† bot ph√°t √¢m thanh iPhone qua iCloud.\n\n"
        "C√°c l·ªánh:\n"
        "/login <s·ªë> ‚Äì ƒëƒÉng nh·∫≠p iCloud\n"
        "/devices <s·ªë> ‚Äì li·ªát k√™ thi·∫øt b·ªã\n"
        "/ring <s·ªë_t√†i_kho·∫£n> <s·ªë_thi·∫øt_b·ªã> ‚Äì ph√°t √¢m thanh\n"
        "/stop <s·ªë_t√†i_kho·∫£n> <s·ªë_thi·∫øt_b·ªã> ‚Äì d·ª´ng ph√°t √¢m thanh\n"
        "/2fa <s·ªë_t√†i_kho·∫£n> <m√£> ‚Äì nh·∫≠p m√£ 2FA\n\n"
        "V√≠ d·ª•:\n/login 1\n/devices 1\n/ring 1 2\n/stop 1 2\n/2fa 1 123456"
    )

async def cmd_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /login <s·ªë_t√†i_kho·∫£n>")
        return
    try:
        account_index = int(context.args[0]) - 1
        if account_index < 0 or account_index >= len(ICLOUD_ACCOUNTS):
            await update.message.reply_text("‚ùó S·ªë t√†i kho·∫£n kh√¥ng h·ª£p l·ªá.")
            return
        _, msg = icloud_login(account_index, force=True)
        await update.message.reply_text(msg)
    except ValueError:
        await update.message.reply_text("‚ùó Tham s·ªë ph·∫£i l√† s·ªë.")

async def cmd_2fa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("C√∫ ph√°p: /2fa <s·ªë_t√†i_kho·∫£n> <m√£_6_s·ªë>")
        return
    try:
        account_index = int(context.args[0]) - 1
        code = context.args[1].strip()
    except ValueError:
        await update.message.reply_text("‚ùó Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return

    acc = apis.get(account_index)
    if not acc:
        await update.message.reply_text("‚ùó Ch∆∞a login. D√πng /login <s·ªë> tr∆∞·ªõc.")
        return
    if not awaiting_2fa.get(account_index, False):
        await update.message.reply_text("‚ÑπÔ∏è Account n√†y hi·ªán kh√¥ng y√™u c·∫ßu 2FA.")
        return

    try:
        acc.validate_2fa_code(code)
        if not acc.is_trusted_session:
            await update.message.reply_text("‚ö†Ô∏è Session ch∆∞a trust. H√£y x√°c nh·∫≠n tr√™n thi·∫øt b·ªã/email r·ªìi /login l·∫°i.")
        else:
            awaiting_2fa[account_index] = False
            await update.message.reply_text("‚úÖ X√°c th·ª±c 2FA th√†nh c√¥ng. D√πng /devices <s·ªë> ƒë·ªÉ xem thi·∫øt b·ªã.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói x√°c th·ª±c 2FA: {e}")

def devget(dev, key, default=None):
    try:
        return dev[key]
    except Exception:
        return default

async def cmd_devices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /devices <s·ªë_t√†i_kho·∫£n>")
        return
    try:
        account_index = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("‚ùó Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return

    acc, msg = icloud_login(account_index, force=False)
    if acc is None:
        await update.message.reply_text(msg)
        return
    if awaiting_2fa.get(account_index, False):
        await update.message.reply_text("üîê ƒêang ch·ªù 2FA. G√µ: /2fa <s·ªë_t√†i_kho·∫£n> <m√£>")
        return

    try:
        devices = list(acc.devices.values())
        if not devices:
            await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o.")
            return

        lines = [f"üì± Danh s√°ch thi·∫øt b·ªã cho t√†i kho·∫£n {account_index+1}:"]
        for idx, d in enumerate(devices, 1):
            name = devget(d, "name", "UNKNOWN")
            model = devget(d, "deviceModel", "")
            batt = devget(d, "batteryLevel", None)
            batt_txt = f" ‚Äì pin {int(batt*100)}%" if isinstance(batt, (int, float)) else ""
            lines.append(f"{idx}. {name} ({model}){batt_txt}")
        lines.append("\nD√πng: /ring <s·ªë_t√†i_kho·∫£n> <s·ªë_thi·∫øt_b·ªã> ho·∫∑c /stop <s·ªë_t√†i_kho·∫£n> <s·ªë_thi·∫øt_b·ªã>")
        await update.message.reply_text("\n".join(lines))
    except Exception as e:
        logger.exception("devices error")
        await update.message.reply_text(f"‚ùå L·ªói l·∫•y danh s√°ch thi·∫øt b·ªã: {e}")

# ---------- RING ----------
async def ring_device(account_index, device_index, target, name):
    """Ph√°t √¢m thanh li√™n t·ª•c (m·ªói 5s) cho ƒë·∫øn khi b·ªã h·ªßy"""
    try:
        while True:
            target.play_sound()
            await asyncio.sleep(0.1)  # g·ª≠i m·ªói 0.1s
    except asyncio.CancelledError:
        logger.info(f"Stopped ringing {name} (account {account_index+1}, device {device_index+1})")

async def cmd_ring(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("C√∫ ph√°p: /ring <s·ªë_t√†i_kho·∫£n> <s·ªë_thi·∫øt_b·ªã>")
        return

    try:
        account_index = int(context.args[0]) - 1
        idx = int(context.args[1]) - 1
    except ValueError:
        await update.message.reply_text("‚ùó Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return

    acc, msg = icloud_login(account_index, force=False)
    if acc is None:
        await update.message.reply_text(msg)
        return
    if awaiting_2fa.get(account_index, False):
        await update.message.reply_text("üîê ƒêang ch·ªù 2FA.")
        return

    try:
        devices = list(acc.devices.values())
        if idx < 0 or idx >= len(devices):
            await update.message.reply_text(f"‚ùó S·ªë ngo√†i ph·∫°m vi (1‚Ä¶{len(devices)}).")
            return

        target = devices[idx]
        name = devget(target, "name", "UNKNOWN")

        # n·∫øu ƒë√£ c√≥ task tr∆∞·ªõc ƒë√≥ th√¨ cancel
        key = (account_index, idx)
        if key in ring_tasks:
            ring_tasks[key].cancel()

        task = asyncio.create_task(ring_device(account_index, idx, target, name))
        ring_tasks[key] = task

        await update.message.reply_text(f"üîî B·∫Øt ƒë·∫ßu ph√°t √¢m thanh: {name} (account {account_index+1})")
    except Exception as e:
        logger.exception("ring error")
        await update.message.reply_text(f"‚ùå L·ªói ph√°t √¢m thanh: {e}")

# ---------- STOP ----------
async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("C√∫ ph√°p: /stop <s·ªë_t√†i_kho·∫£n> <s·ªë_thi·∫øt_b·ªã>")
        return

    try:
        account_index = int(context.args[0]) - 1
        idx = int(context.args[1]) - 1
    except ValueError:
        await update.message.reply_text("‚ùó Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return

    key = (account_index, idx)
    if key in ring_tasks:
        ring_tasks[key].cancel()
        del ring_tasks[key]
        await update.message.reply_text(f"üõë ƒê√£ d·ª´ng ph√°t √¢m thanh cho thi·∫øt b·ªã {idx+1} (account {account_index+1})")
    else:
        await update.message.reply_text("‚ùó Kh√¥ng c√≥ t√°c v·ª• n√†o ƒëang ch·∫°y cho thi·∫øt b·ªã n√†y.")

# ---------- MAIN ----------
def main():
    app = ApplicationBuilder().token(TG_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("login", cmd_login))
    app.add_handler(CommandHandler("2fa", cmd_2fa))
    app.add_handler(CommandHandler("devices", cmd_devices))
    app.add_handler(CommandHandler("ring", cmd_ring))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()



